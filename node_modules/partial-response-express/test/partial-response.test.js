const chai          = require('chai'); 
const expect        = chai.expect;

const express       = require('express');
const request       = require('supertest');
const partial       = require('../lib');

describe('partial response middleware test', () => {

    describe('should be a success status code', done => {
        let app,
            getMiddleware,
            jsonResponse;

        beforeEach(() => {
            jsonResponse = {
                firstName: 'Lucas',
                surname: 'Mendes Loureiro',
                documents:[{
                    name: 'rg',
                    value: '280493423'
                },{
                    name: 'cpf',
                    value: '25290251006'
                }]
            };
    
            getMiddleware = (req, res) => res.status(200).json(jsonResponse);
    
            app = express()
                    .use(partial())
                    .get('/', getMiddleware);
    
        });

        it('return all fields from request', done => {
            request(app)
                .get('/')
                .expect(200)
                .expect(res => {
                    expect(res.body).to.not.be.null;
                    expect(res.body.firstName).to.not.be.null;
                    expect(res.body.surname).to.not.be.null;
                    expect(res.body.documents).to.not.be.null;
                    expect(res.body.documents).length.greaterThan(1);                    
                })
                .end(done);                
        });

        it('filter main fields in request', done => {
            request(app)
                .get('/?fields=firstName,surname')
                .expect(200)
                .expect(res => {
                    expect(res.body.firstName).to.not.be.null;
                    expect(res.body.surname).to.not.be.null;
                    expect(res.body.documents).to.be.undefined;
                })
                .end(done);
        });

        it('filter main fields and nested fields in request', done => {
            request(app)
                .get('/?fields=firstName,documents(value)')
                .expect(200)
                .expect(res => {
                    expect(res.body.firstName).to.not.be.null;
                    expect(res.body.documents).to.be.an('array');
                })
                .end(done);
        });

        it('change default parameter name and execute filter', done => {
            app = express()
                .use(partial({
                    query: 'filter'
                }))
                .get('/', getMiddleware);

            
            request(app)
                .get('/?filter=firstName,surname')
                 .expect(200)
                 .expect(res => {
                    expect(res.body.firstName).to.not.be.null;
                    expect(res.body.surname).to.not.be.null;
                 })
                 .end(done);
        })

    });

    describe('should be a error status code', done => {

        it('throws error and returns a error object', done => {

            let app = express()
                        .use(partial())
                        .get('/', (req, res, next) => next(new Error("something went wrong")))
                        .use((err, req, res, next) => {
                            res.status(500).json({
                                code: res.statusCode,
                                error: err.message
                            });
                        });
            
            request(app)
                .get('/?fields=fieldNotExists')
                .expect(500)
                .expect(res => {
                    expect(res.body.code).to.not.be.null;
                    expect(res.body.error).to.not.be.null;

                    expect(res.body.error).to.be.equal('something went wrong');
                    expect(res.body.code).to.be.equal(500);
                })
                .end(done);            
        });

    });

});

